version: '1.0'

# The pipeline calls itself
# recursively for each of the supported Helm versions provided in a the list
#
# Attention: do not set the HELM_VERSION variable - it is set automatically with the values from the list

steps:
  versions_list:
    image: alpine
    commands:
      - |- 
        cat <<EOF > helmVersionsList 
        2.9.0
        2.9.1
        2.10.0
        2.11.0
        2.12.1
        2.12.2
        2.12.3
        2.14.0
        2.14.1
        2.14.2
        2.14.3
        3.0.0-beta.2
        3.0.0-beta.3
    when:
      condition:
        all:
          notRecursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == true'
          
  run-cli-loop:
    image: codefresh/cli
    commands:
      - for VAR in $(cat helmVersionsList); do codefresh wait $(codefresh run ${{CF_PIPELINE_NAME}} -d --branch ${{CF_BRANCH}} --variable HELM_VERSION=${VAR} --trigger ${{CF_PIPELINE_TRIGGER_ID}} --context github) & done
      - for j in $(jobs -p); do wait $j || (echo "Failed to build one of the images" && ! break); done
    when:
      condition:
        all:
          notRecursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == true'

  clone:
    type: git-clone
    arguments:
      repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
      git: github
      revision: '${{CF_REVISION}}'
      when:
        condition:
          all:
            recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'

  build_image:
    type: build
    working_directory: '${{clone}}'
    image_name: '${{STEP_IMAGE}}'
    tag: '${{HELM_VERSION}}-${{CF_SHORT_REVISION}}'
    build_arguments:
      - 'HELM_VERSION=${{HELM_VERSION}}'
    when:
      condition:
        all:
          recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'
      
  push:
    type: push
    registry: dockerhub
    tag: ${{HELM_VERSION}}
    candidate: ${{build_image}}
    when:
      condition:
        all:
          recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'
          masterBranch: 'match("${{CF_BRANCH}}", "^master", true) == true'
          
  push_latest:
    type: push
    registry: dockerhub
    tag: latest
    candidate: ${{build_image}}
    when:
      condition:
        all:
          latestHelmVersion: "'${{HELM_VERSION}}' == '${{LATEST_VERSION}}'"
          masterBranch: "'${{CF_BRANCH}}' == 'master'"
